%% Import data from text file
% Script for importing data from the following text file:
%
%    filename: C:\Users\Inver\OneDrive\Desktop\austria endurance.txt
%
% Auto-generated by MATLAB on 03-Sep-2022 18:23:33

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 3);

% Specify range and delimiter
opts.DataLines = [1, Inf];
opts.Delimiter = "\t";

% Specify column names and types
opts.VariableNames = ["s", "d", "r"];
opts.VariableTypes = ["categorical", "double", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, "s", "EmptyFieldRule", "auto");

% Import the data
austriaendurance_sections = readtable("acceleration_testing.txt", opts);
austriaendurance_data = table2array(austriaendurance_sections(:,2:end));

%% Clear temporary variables
clear opts

num1 = length(austriaendurance_data(:,1));
num2 = ceil(sum(austriaendurance_data(:, 1)) * 10);
track_data = zeros(num2, 3);
target_velocity = [0];
target_radius = [0];
phi = [0];
x_distance = [0];
y_distance = [0];
x_2 = [0];
y_2 = [0];
tan_div = [0];
tanx = [0];
tany = [0];
counter = 2;
num_elem = 1;

for i = 1:num1
    num3 = floor(austriaendurance_data(i, 1) * 10);
    distances = [(0.1:0.1:0.1*num3) austriaendurance_data(i, 1)]' + track_data(counter-1, 1);
    track_data(counter:counter+num3, 1) = distances;
    counter = counter + num3 + 1;
    num2 = length(distances);

    if austriaendurance_sections{i, 1} == "Straight"
        target_velocity(end+1) = 35;
        target_radius(end+1) = austriaendurance_data(i, 2);
    else
        if austriaendurance_sections{i, 1} == "Left"
            target_velocity(end+1) = 7;
            target_radius(end+1) = austriaendurance_data(i, 2);
            phi_1 = -phi(end) + pi;
        elseif austriaendurance_sections{i, 1} == "Right"
            target_velocity(end+1) = 7;
            target_radius(end+1) = austriaendurance_data(i, 2);
            phi_1 = -phi(end);
        end

        x_2(end+1) = round((target_radius(end) * sin(phi_1)) + x_distance(end),9);
        y_2(end+1) = round((target_radius(end) * cos(phi_1)) + y_distance(end),9);

%         x_2 = target_radius(end) * cos(phi_1) + x_distance(end);
%         y_2 = target_radius(end) * sin(phi_1) + y_distance(end);
    end

    y_test = [0:0.01:target_radius(end)];
    x_test = sign(y_2(end))*sqrt(target_radius(end)^2 - (y_test).^2) + x_2(end);

    for j = 1:num2-1
        if austriaendurance_sections{i, 1} == "Straight"
            phi(end+1) = phi(end); 
            x_distance(end+1) = distances(j) * cos(phi(end));
            y_distance(end+1) = distances(j) * sin(phi(end));

        else
            theta = (distances(j+1) - distances(1)) / target_radius(end);
            beta_1 = -4 * y_2(end) * (sin(theta / 2))^2;
            beta_2 = (4 * target_radius(end)^2 * (sin(theta/2))^4) - (4*x_2(end)^2*(sin(theta/2))^2);

            y_3 = (real((-beta_1 + (sign(sin(phi(end)))*sqrt(beta_1^2-(4*beta_2))))/2 + y_distance(end)));
            x_3 = (real((sign(cos(phi(end)))*sqrt(target_radius(end)^2-((y_3-y_2(end))^2)))) + x_2(end));

            phi(end+1) = atan2((x_3-x_distance(end)),(y_3-y_distance(end)));
            phi(end) = -phi(end) + (pi/2);

            tan_div(end+1) = (x_3-x_distance(end))/(y_3-y_distance(end));
            tanx(end+1) = x_3-x_distance(end);
            tany(end+1) = y_3-y_distance(end);
            
            x_distance(end+1) = x_3;
            y_distance(end+1) = y_3;
        end
        num_elem = num_elem + 1;
    end

    if num_elem > 140
        figure(1)
        scatter(y_distance, x_distance)
        hold on
        scatter(y_2, x_2)
    end
%     hold on
%     plot(y_test+y_2, -x_test)
end

data = [target_velocity' x_distance' y_distance' phi'];