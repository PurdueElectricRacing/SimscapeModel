%% Simulation Inputs
% battery layout
parallel = 4; % number of cells in parallel
series = 76; % number of cells in series

% cell constants
RCell = 0.0144; % Cell internal resistance [Ω]

% read cell voltage curve
mat = readmatrix("CellVoltageCurve.csv");
CellAhDischarged = mat(:,1); % cell capacity discharged [Ah]
CellVoc = mat(:,2); % cell open-circuit voltage [V]

% Calculte cell capacity by integration [Wh]
CellCapacity = sum(diff(CellAhDischarged) .* .5 .* (CellVoc(1:end-1) + CellVoc(2:end)));

% Create whole-battery values by extrapolating cells
BattAhDischarged = CellAhDischarged .* parallel;
BattVoc = CellVoc .* series;
BattCapacity = CellCapacity .* parallel .* series;

% calculate total battery capacity and resistance
RBatt = RCell * series; % total battery internal resistance [Ω]

CReg = .6; % voltage regulation capacitor [F]

MotorCurrentTimes = [0 1]; % List of times corresponding to current values [s]
MotorCurrentVals = [0 70]; % List of current at given times, assumed to be constant [A]

%% Simulation Setup
tStop = 2; % simulation time [s]
tStep = 0.001; % simulation step [s]
t = 0:tStep:tStop; % array of simulation time
IM_t = interp1(MotorCurrentTime, LoadCurrent, t, "previous", "extrap"); % convert motor (load) curret
Vb_t = zeros(size(t));
Voc_t = zeros(size(t));

%% Run Simulation
Vb_t(1) = BattVoc(1) - RBatt * IM_t(1);
Voc_t(1) = BattVoc(1);

tOffset = 0;
IM_old = IM_t(1);
Vb_old = Vb_t(1);
scatter(t,IM_t)


for i = 2:length(t)
    if IM_t(i) ~= IM_old
        tOffset = t(i);
        IM_old = IM_t(i);
        Vb_old = Vb_t(i-1);
    end
    Vb(t) = (Voc_t(1) - IM_t(i)) * (1 - exp(-(t(i)-tOffset)/CReg)) + Vb_old*exp(-(t))
end